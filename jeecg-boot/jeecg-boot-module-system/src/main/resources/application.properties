spring.profiles.active=main

server.servlet.context-path=/jeecg-boot
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

server.tomcat.max-swallow-size=-1
server.error.include-exception=true
server.error.include-stacktrace=ALWAYS
server.error.include-message=ALWAYS
server.compression.enabled=true
server.compression.min-response-size=1024
server.compression.mime-types=application/javascript,application/json,application/xml,text/html,text/xml,text/plain,text/css,image/*

# 多数据源配置, master 为 主业务用到的数据源
spring.datasource.dynamic.primary=master
spring.datasource.dynamic.strict=false
spring.datasource.dynamic.p6spy=false

# 主数据库
spring.datasource.dynamic.datasource.master.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.dynamic.datasource.master.type=com.alibaba.druid.pool.DruidDataSource

# druid
spring.datasource.dynamic.druid.initial-size=5
spring.datasource.dynamic.druid.min-idle=5
spring.datasource.dynamic.druid.max-active=20
spring.datasource.dynamic.druid.max-wait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.dynamic.druid.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.dynamic.druid.min-evictable-idle-time-millis=300000
spring.datasource.dynamic.druid.validation-query=SELECT 1
spring.datasource.dynamic.druid.test-while-idle=true
spring.datasource.dynamic.druid.test-on-borrow=false
spring.datasource.dynamic.druid.test-on-return=false
spring.datasource.dynamic.druid.pool-prepared-statements=true
spring.datasource.dynamic.druid.max-pool-prepared-statement-per-connection-size=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.dynamic.druid.filters=stat,wall,slf4j
spring.datasource.dynamic.druid.connection-properties=druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000

# druid(动态多数据源基础配置)
spring.datasource.druid.db-type=mysql
spring.datasource.druid.break-after-acquire-failure=true
spring.datasource.druid.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.druid.initial-size=5
spring.datasource.druid.min-idle=5
spring.datasource.druid.max-active=20
spring.datasource.druid.max-wait=60000
spring.datasource.druid.time-between-eviction-runs-millis=60000
spring.datasource.druid.min-evictable-idle-time-millis=300000
spring.datasource.druid.test-while-idle=true
spring.datasource.druid.test-on-borrow=false
spring.datasource.druid.test-on-return=false
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
spring.datasource.druid.filters=stat,wall,slf4j
spring.datasource.druid.validation-query=SELECT 1

# 监控
spring.datasource.druid.stat-view-servlet.enabled=true
spring.datasource.druid.stat-view-servlet.login-username=admin
spring.datasource.druid.stat-view-servlet.login-password=BbPVaaQktKsFrjPr
spring.datasource.druid.web-stat-filter.enabled=true

# shardingsphere 数据源
spring.shardingsphere.datasource.names=master
spring.shardingsphere.datasource.master.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.master.initial-size=10
spring.shardingsphere.datasource.master.max-active=100
spring.shardingsphere.datasource.master.min-idle=10
spring.shardingsphere.datasource.master.max-wait=60000
spring.shardingsphere.datasource.master.pool-prepared-statements=true
spring.shardingsphere.datasource.master.max-pool-prepared-statement-per-connection-size=20
spring.shardingsphere.datasource.master.time-between-eviction-runs-millis=60000
spring.shardingsphere.datasource.master.min-evictable-idle-time-millis=300000
spring.shardingsphere.datasource.master.validation-query=SELECT 1 FROM DUAL
spring.shardingsphere.datasource.master.test-while-idle=true
spring.shardingsphere.datasource.master.test-on-borrow=false
spring.shardingsphere.datasource.master.test-on-return=false
spring.shardingsphere.datasource.master.stat-view-servlet.enabled=true
spring.shardingsphere.datasource.master.stat-view-servlet.url-pattern=/druid/*
spring.shardingsphere.datasource.master.filter.stat.log-slow-sql=true
spring.shardingsphere.datasource.master.filter.stat.slow-sql-millis=3000
spring.shardingsphere.datasource.master.filter.stat.merge-sql=true
spring.shardingsphere.datasource.master.filter.wall.config.multi-statement-allow=true
spring.shardingsphere.datasource.master.connection-init-sql=set names utf8mb4;

spring.shardingsphere.rules.sharding.binding-tables=log_player,log_cmd,log_shop,log_player_level,log_chat

# 分片配置, ref: https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/sharding/
# 行表达式：https://shardingsphere.apache.org/document/4.1.1/cn/features/sharding/other-features/inline-expression/
spring.shardingsphere.rules.sharding.sharding-algorithms.custom-month-sharding.type=CLASS_BASED
spring.shardingsphere.rules.sharding.sharding-algorithms.custom-month-sharding.props.strategy=STANDARD
spring.shardingsphere.rules.sharding.sharding-algorithms.custom-month-sharding.props.algorithmClassName=cn.youai.xiuzhen.core.sharding.DateStandardShardingAlgorithm
spring.shardingsphere.rules.sharding.sharding-algorithms.custom-month-sharding.props.sharding-suffix-pattern=yyyyMM
spring.shardingsphere.rules.sharding.sharding-algorithms.custom-month-sharding.props.datetime-lower=2022-01-01
spring.shardingsphere.rules.sharding.sharding-algorithms.custom-month-sharding.props.datetime-upper=2023-12-31
spring.shardingsphere.rules.sharding.sharding-algorithms.custom-month-sharding.props.datetime-interval-amount=1
spring.shardingsphere.rules.sharding.sharding-algorithms.custom-month-sharding.props.datetime-interval-unit=MONTHS

# ========================== log_player 分片 ========================== #
spring.shardingsphere.rules.sharding.tables.log_player.logic-table=log_player
spring.shardingsphere.rules.sharding.tables.log_player.actual-data-nodes=master.log_player_$->{2022..2023}${(1..12).collect{t ->t.toString().padLeft(2,'0')}}
spring.shardingsphere.rules.sharding.tables.log_player.table-strategy.standard.sharding-algorithm-name=custom-month-sharding
spring.shardingsphere.rules.sharding.tables.log_player.table-strategy.standard.sharding-column=create_date

# ========================== log_cmd 分片 ========================== #
spring.shardingsphere.rules.sharding.tables.log_cmd.logic-table=log_cmd
spring.shardingsphere.rules.sharding.tables.log_cmd.actual-data-nodes=master.log_cmd_$->{2022..2023}${(1..12).collect{t ->t.toString().padLeft(2,'0')}}
spring.shardingsphere.rules.sharding.tables.log_cmd.table-strategy.standard.sharding-algorithm-name=custom-month-sharding
spring.shardingsphere.rules.sharding.tables.log_cmd.table-strategy.standard.sharding-column=create_date

# ========================== log_shop 分片 ========================== #
spring.shardingsphere.rules.sharding.tables.log_shop.logic-table=log_shop
spring.shardingsphere.rules.sharding.tables.log_shop.actual-data-nodes=master.log_shop_$->{2022..2023}${(1..12).collect{t ->t.toString().padLeft(2,'0')}}
spring.shardingsphere.rules.sharding.tables.log_shop.table-strategy.standard.sharding-algorithm-name=custom-month-sharding
spring.shardingsphere.rules.sharding.tables.log_shop.table-strategy.standard.sharding-column=create_date

# ========================== log_player_level 分片 ========================== #
spring.shardingsphere.rules.sharding.tables.log_player_level.logic-table=log_player_level
spring.shardingsphere.rules.sharding.tables.log_player_level.actual-data-nodes=master.log_player_level_$->{2022..2023}${(1..12).collect{t ->t.toString().padLeft(2,'0')}}
spring.shardingsphere.rules.sharding.tables.log_player_level.table-strategy.standard.sharding-algorithm-name=custom-month-sharding
spring.shardingsphere.rules.sharding.tables.log_player_level.table-strategy.standard.sharding-column=create_date

# ========================== log_chat 分片 ========================== #
spring.shardingsphere.rules.sharding.tables.log_chat.logic-table=log_chat
spring.shardingsphere.rules.sharding.tables.log_chat.actual-data-nodes=master.log_chat_$->{2022..2023}${(1..12).collect{t ->t.toString().padLeft(2,'0')}}
spring.shardingsphere.rules.sharding.tables.log_chat.table-strategy.standard.sharding-algorithm-name=custom-month-sharding
spring.shardingsphere.rules.sharding.tables.log_chat.table-strategy.standard.sharding-column=create_date

# redis 配置
spring.redis.database=0
spring.redis.timeout=500

# jedis
spring.redis.jedis.pool.max-active=8
spring.redis.jedis.pool.max-wait=8
spring.redis.jedis.pool.max-idle=10
spring.redis.jedis.pool.min-idle=0

# lettuce
# 最大连接数据库连接数,设 0 为没有限制
spring.redis.lettuce.pool.max-active=8
# 最大等待连接中的数量,设 0 为没有限制
spring.redis.lettuce.pool.max-idle=8
# 最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
spring.redis.lettuce.pool.max-wait=-1ms
# 最小等待连接中的数量,设 0 为没有限制
spring.redis.lettuce.pool.min-idle=0
spring.redis.lettuce.shutdown-timeout=100ms

# Actuator 配置
management.endpoints.enabled-by-default=true
management.endpoints.web.exposure.include=*
management.endpoints.web.exposure.exclude=env,beans
management.trace.http.enabled=true
management.endpoint.httptrace.enabled=true
management.endpoint.health.show-details=always
# 自定义管理端点路径
#management.endpoints.web.base-path=/manage

## mybatis plus 设置
mybatis-plus.mapper-locations=classpath*:mappers/*.xml,classpath*:org/jeecg/modules/**/xml/*Mapper.xml
mybatis-plus.global-config.banner=false
mybatis-plus.global-config.db-config.id-type=AUTO
mybatis-plus.global-config.db-config.table-underline=true

# mail
spring.mail.host=smtp.163.com
spring.mail.username=studio1101@163.com
spring.mail.password=Dp3L8n8zHr3L
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

## quartz定时任务,采用数据库方式
spring.quartz.job-store-type=jdbc
spring.quartz.initialize-schema=embedded
# 定时任务启动开关，true-开  false-关
spring.quartz.auto-startup=true
# 延迟1秒启动定时任务
spring.quartz.startup-delay=1s
# 启动时更新己存在的Job
spring.quartz.overwrite-existing-jobs=true
# scheduler
spring.quartz.properties.org.quartz.scheduler.instanceName=MyScheduler
spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO
# jobStore
spring.quartz.properties.org.quartz.jobStore.class=org.springframework.scheduling.quartz.LocalDataSourceJobStore
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
spring.quartz.properties.org.quartz.jobStore.tablePrefix=QRTZ_
spring.quartz.properties.org.quartz.jobStore.isClustered=true
spring.quartz.properties.org.quartz.jobStore.misfireThreshold=12000
spring.quartz.properties.org.quartz.jobStore.clusterCheckinInterval=15000
# threadPool
spring.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
spring.quartz.properties.org.quartz.threadPool.threadCount=10
spring.quartz.properties.org.quartz.threadPool.threadPriority=5
spring.quartz.properties.org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true

# json 时间戳统一转换
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss

spring.aop.proxy-target-class=true
spring.aop.auto=true

spring.activiti.check-process-definitions=false
# 启用作业执行器
spring.activiti.async-executor-activate=false
# 启用异步执行器
spring.activiti.job-executor-activate=false

# jpa
spring.jpa.open-in-view=false

# 配置freemarker
# 设置模板后缀名
spring.freemarker.suffix=.ftl
# 设置文档类型
spring.freemarker.content-type=text/html
# 设置页面编码格式
spring.freemarker.charset=UTF-8
# 设置页面缓存
spring.freemarker.cache=false
spring.freemarker.prefer-file-system-access=false
# 设置ftl文件路径
spring.freemarker.template-loader-path=classpath:/templates

# 设置静态文件路径，js,css等
spring.mvc.static-path-pattern=/**
# Spring Boot 2.6+后映射匹配的默认策略已从AntPathMatcher更改为PathPatternParser,需要手动指定为ant-path-matcher
spring.mvc.pathmatch.matching-strategy=ant_path_matcher

spring.resource.static-locations=classpath:/static/,classpath:/public/

# 排除 droid 自动配置，使用自定义多数据源
spring.autoconfigure.exclude=com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure


#-------------------------------------- jeecg专用配置 --------------------------------------#
# jeecg专用配置
minidao.base-package=org.jeecg.modules.jmreport.*
# 是否启用安全模式
jeecg.safeMode=false
# 签名密钥串(前后端要一致，正式发布请自行修改)
jeecg.signatureSecret=dd05f1c54d63749eda95f9fa6d49v442a

# 本地：local\Minio：minio\阿里云：alioss
jeecg.uploadType=local
# 前端访问地址
jeecg.domainUrl.pc=http://localhost:3100
jeecg.domainUrl.app=http://localhost:8051

# 文件上传根目录 设置
jeecg.path.upload=/var/www/static/upload
# webapp文件路径
jeecg.path.webapp=/var/www/static/webapp

# 短信秘钥
jeecg.sms.accessKeyId=??
jeecg.sms.accessKeySecret=??

# 主题颜色（仅支持 16进制颜色代码）
jeecg.desform.theme-color=#1890ff
# 文件、图片上传方式，可选项：qiniu（七牛云）、system（跟随系统配置）
jeecg.desform.upload-type=system

# 在线预览文件服务器地址配置
jeecg.file-view-domain=http://127.0.0.1:8012

# shiro
jeecg.shiro.excludeUrls=/test/jeecgDemo/demo3,/test/jeecgDemo/redisDemo/**,/category/**,/visual/**,/map/**,/jmreport/bigscreen2/**

# 阿里云oss存储配置
jeecg.oss.endpoint=oss-cn-beijing.aliyuncs.com
jeecg.oss.accessKey=WegDpuKzOuPK6D3N
jeecg.oss.secretKey=??
jeecg.oss.bucketName=jeecgos
jeecg.oss.staticDomain=??

# ElasticSearch 设置
jeecg.elasticsearch.cluster-name=jeecg-ES
jeecg.elasticsearch.cluster-nodes=127.0.0.1:9200
jeecg.elasticsearch.check-enabled=false

# minio文件上传
jeecg.minio.minio_url=http://minio.jeecg.com
jeecg.minio.minio_name=??
jeecg.minio.minio_pass=??
jeecg.minio.bucketName=??

# 大屏报表参数设置
jeecg.jmreport.mode=prod
# 数据字典是否进行saas数据隔离，自己看自己的字典
jeecg.jmreport.saas=false
# 是否需要校验token
jeecg.jmreport.is_verify_token=false
# 必须校验方法
jeecg.jmreport.verify_methods=remove,delete,save,add,update

# WPS在线文档
jeecg.wps.domain=https://wwo.wps.cn/office/
jeecg.wps.appid=??
jeecg.wps.appsecret=??

# xxl-job配置
jeecg.xxljob.enabled=false
jeecg.xxljob.adminAddresses=http://127.0.0.1:9080/xxl-job-admin
jeecg.xxljob.appname=${spring.application.name}
jeecg.xxljob.accessToken=''
jeecg.xxljob.address=127.0.0.1:30007
jeecg.xxljob.ip=127.0.0.1
jeecg.xxljob.port=30007
jeecg.xxljob.logPath=logs/jeecg/job/jobhandler/
jeecg.xxljob.logRetentionDays=30

jeecg.route.config.data-id=jeecg-gateway-router
jeecg.route.config.group=DEFAULT_GROUP
#自定义路由配置 yml nacos database
jeecg.route.config.data-type=database

# 分布式锁配置
jeecg.redisson.type=STANDALONE
jeecg.redisson.enabled=true

# cas单点登录
cas.prefixUrl=http://cas.example.org:8443/cas

# swagger
# 开启增强配置
knife4j.enable=false
# 开启生产环境屏蔽
knife4j.production=false
knife4j.basic.enable=true
knife4j.basic.username=jeecg
knife4j.basic.password=jeecg1314

#
third-app.enabled: false

# okhttp
ok.http.connect-timeout=10
ok.http.read-timeout=15
ok.http.write-timeout=15
# 连接池中整体的空闲连接的最大数量
ok.http.max-idle-connections=100
# 连接空闲时间最多为 300 秒
ok.http.keep-alive-duration=300

#-------------------------------------- game business --------------------------------------#
# 清除缓存接口
app.clean-cache-url=/cache/clear?className=
# 发送邮件
app.send-mail-url=/mail/send
# 同步邮件
app.sync-mail-url=/mail/sync
# 发送邮件
app.send-httpemail-url=/httpEmail/send

# 通知游戏服更新跑马灯消息
app.send-lamp-notice-update=/gameLamp/notice/update
# 商品刷新
app.goods.refresh=/rechargeGoods/update

# 其他配置
app.folder.game=/var/www/static/xiuzhen/game
app.folder.server=/var/www/static/xiuzhen/server
app.folder.notice=/var/www/static/xiuzhen/notice
app.folder.update=/var/www/static/xiuzhen/update
app.folder.ip-whitelist=/var/www/static/xiuzhen/ipwhitelist
# 图片上传目录
app.folder.image=/var/www/static/xiuzhen/image
# 临时目录
app.folder.temp=/var/www/static/xiuzhen/temp
# 前端部署路径
app.folder.frontend=/var/www/frontend
