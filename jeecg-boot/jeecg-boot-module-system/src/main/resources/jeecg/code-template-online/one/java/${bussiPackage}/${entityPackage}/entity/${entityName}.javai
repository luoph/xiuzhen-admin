package ${bussiPackage}.${entityPackage}.entity;

import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.math.BigDecimal;
import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableName;
import lombok.Data;
import com.fasterxml.jackson.annotation.JsonFormat;
import org.springframework.format.annotation.DateTimeFormat;
import org.jeecg.common.constant.TimeConstant;
import org.jeecgframework.poi.excel.annotation.Excel;
import org.jeecg.common.aspect.annotation.Dict;

/**
 * @author jeecg-boot
 * @version V1.0
 * @description ${tableVo.ftlDescription}
 * @date   ${.now?string["yyyy-MM-dd"]}
 */
@Data
@TableName("${tableName}")
public class ${entityName} implements Serializable {
    private static final long serialVersionUID = 1L;
    
    <#list originalColumns as po>
	/**${po.filedComment}*/
	<#if po.fieldName == primaryKeyField>
	@TableId(type = IdType.ID_WORKER_STR)
	<#else>
  		<#if po.fieldDbType == 'Date'>
			<#if po.classType == 'date'>
	@Excel(name = "${po.filedComment}", width = 15, format = TimeConstant.DEFAULT_DATE_FORMAT)
	@JsonFormat(timezone = TimeConstant.DEFAULT_TIMEZONE, pattern = TimeConstant.DEFAULT_DATE_FORMAT)
    @DateTimeFormat(pattern = TimeConstant.DEFAULT_DATE_FORMAT)
			<#else>
	@Excel(name = "${po.filedComment}", width = 20, format = TimeConstant.DEFAULT_TIME_FORMAT)
	@JsonFormat(timezone = TimeConstant.DEFAULT_TIMEZONE, pattern = TimeConstant.DEFAULT_TIME_FORMAT)
    @DateTimeFormat(pattern = TimeConstant.DEFAULT_TIME_FORMAT)
			</#if>
		<#else>
	@Excel(name = "${po.filedComment}", width = 15)
  		</#if>
  		<#--  <#if po.classType != 'popup'>
  			<#if po.dictTable?default("")?trim?length gt 1>
  	@Dict(dicCode = "${po.dictField}",dicText = "${po.dictText}", dictTable = "${po.dictTable}")
  			<#elseif po.dictField?default("")?trim?length gt 1>
  	@Dict(dicCode = "${po.dictField}")
  			</#if>
  		</#if>-->
    </#if>
    <#if po.fieldDbType == 'Blob'>
    private transient java.lang.String ${po.fieldName}String;

    private byte[] ${po.fieldName};

    public byte[] get${po.fieldName?cap_first}(){
        if(${po.fieldName}String == null){
            return null;
        }
        try {
            return ${po.fieldName}String.getBytes("UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }

    public String get${po.fieldName?cap_first}String(){
        if(${po.fieldName} == null || ${po.fieldName}.length == 0){
            return "";
        }
        try {
            return new String(${po.fieldName}, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return "";
    }
    <#else>
    private ${po.fieldType} ${po.fieldName};
    </#if>
	</#list>
}
